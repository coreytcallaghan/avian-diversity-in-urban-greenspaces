axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.45, y=0.34, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4, vjust=-1.0,hjust=-1.2)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.45, y=0.34, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4, vjust=-1.0,hjust=-0.8)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.45, y=0.34, label="2D Stress: 0.09")
install.packages('ggrepel')
library(ggrepel)
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text_repel(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4, vjust=-1.0,hjust=-0.8)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.45, y=0.34, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text_repel(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.45, y=0.34, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text_repel(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.35, y=0.34, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text_repel(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.35, y=0.24, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text_repel(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.32, y=0.24, label="2D Stress: 0.09")
ggplot()+
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=data), color="black", size=4)+
geom_text_repel(data=data.scores,aes(x=NMDS1,y=NMDS2,label=year), color="black", size=4)+
xlim(-0.50, 0.40)+
ylim(-0.20, 0.30)+
scale_shape_manual(values=c("eBird" = 0, "Structured Surveys" = 15))+
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
guides(shape=FALSE)+
annotate("text", x=0.32, y=0.28, label="2D Stress: 0.09")
similarity <- simper(multi.mds, factors$factor_data, permutations=999)
summary(similarity)
?simper
ebird %>%
group_by(SAMPLING_EVENT_IDENTIFIER) %>%
summarise(Richness=length(unique(Species)),
distance=mean(EFFORT_DISTANCE_KM),
Diversity=diversity(Count)) %>%
mutate(bins=cut(.$distance, breaks=c(0,1,2,5,12), labels=c("0-1","1-2","2-5", ">5"))) %>%
filter(complete.cases(.))%>%
gather(., estimate, measurement, Richness, Diversity, factor_key=TRUE)%>%
ggplot(., aes(x=bins, y=measurement))+
geom_boxplot()+
stat_summary(fun.y=mean, colour="black", geom="point",
shape=18, size=3, show_guide = FALSE)+
xlab("Distance")+
ylab("")+
theme_bw()+
theme(axis.text.x = element_text(size=14, color='black'),
axis.ticks = element_blank(),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
facet_wrap(~estimate, scales="free")
ebird %>%
group_by(SAMPLING_EVENT_IDENTIFIER) %>%
summarise(Richness=length(unique(Species)),
distance=mean(EFFORT_DISTANCE_KM),
Diversity=diversity(Count)) %>%
mutate(bins=cut(.$distance, breaks=c(0,1,2,5,12), labels=c("0-1","1-2","2-5", ">5"))) %>%
filter(complete.cases(.))%>%
gather(., estimate, measurement, Richness, Diversity, factor_key=TRUE)%>%
ggplot(., aes(x=bins, y=measurement))+
geom_boxplot()+
stat_summary(fun.y=mean, colour="black", geom="point",
shape=18, size=3, show_guide = FALSE)+
xlab("Distance (km)")+
ylab("")+
theme_bw()+
theme(axis.text.x = element_text(size=14, color='black'),
axis.ticks = element_blank(),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())+
facet_wrap(~estimate, scales="free")
Bdat <- read.csv("H:/Dissertation/Dissertation Chapters/Data Chapters/Avian species diversity and land use - a Florida experience/Data/Analysis_Dataset.csv")
Bird_Points_Landcover <- read.csv("H:/Dissertation/Dissertation Chapters/Data Chapters/Avian species diversity and land use - a Florida experience/Data/Spatial Analysis Data/Spatial_Data.csv")
Birds <- Bird_Points_Landcover%>%filter(GRIDCODE != 0)
###### Making gridcode metadata
GRIDCODE <- c(11, 21, 22, 23, 24, 31, 41, 42, 43, 50, 52, 71, 81, 82, 90, 95)
Landcover <- c("Open Water", "Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity",
"Developed, High Intensity", "Barren Land (Rock/Sand/Clay)", "Deciduous Forest", "Evergreen Forest",
"Mixed Forest", "Urban Green Area", "Shrub/Scrub", "Grassland/Herbaceous", "Pasture/Hay", "Cultivated Crops",
"Woody Wetlands", "Emergent Herbaceous Wetlands")
Aggregated_landcover <- c("Green Area", "open-urban", "low-intensity developed",
"medium/high-intensity developed", "medium/high-intensity developed",
"open-urban", "Green Area", "Green Area", "Green Area",
"Green Area","Green Area", "agriculture", "agriculture",
"agriculture", "Green Area", "Green Area")
Landcover_metadata <- as.data.frame(cbind(GRIDCODE, Landcover, Aggregated_landcover))
####### Making file to use for analysis
Birds <- merge(Birds, Landcover_metadata, by="GRIDCODE")
###### Renaming Aggregated Landcover column based on urban or non-urban layer
Birds$landcover[Birds$Aggregated_landcover=="open-urban"] <- "Open-urban"
Birds$landcover[Birds$Aggregated_landcover=="agriculture"] <- "Agriculture"
Birds$landcover[Birds$Aggregated_landcover=="low-intensity developed"] <- "Low-intensity developed"
Birds$landcover[Birds$Aggregated_landcover=="medium/high-intensity developed"] <- "Medium/high-intensity developed"
Birds$landcover[Birds$Aggregated_landcover=="Green Area" & Birds$UATYP10=="U"] <- "Urban Green Area"
Birds$landcover[Birds$Aggregated_landcover=="Green Area" & Birds$UATYP10==""] <- "Natural Green Area"
Birds$Aggregated_landcover <- NULL
names(Birds)[names(Birds)=='landcover'] <- 'AG_LC'
names(Birds)[names(Birds)=='Landcover'] <- 'LC'
###### Getting rid of species with 'x's for counts ######
Birds <- Birds%>%filter(OBSERVATIO != "X")
Birds$OBSERVATIO <- as.numeric(Birds$OBSERVATIO)
birds_taxonomic <- read.csv("H:/Dissertation/Dissertation Chapters/Data Chapters/Avian species diversity and land use - a Florida experience/Data/Birds classification/birds.all.csv")
Birds$Classifica <- NULL
Birds$SCIENTIFIC <- NULL
guild_analysis <- merge(Birds, birds_taxonomic, by="COMMON_NAM")
########### GETTING A DATAFRAME FOR ANALYSIS TO BE COMPLETED ON ###############
ANALYSIS <- guild_analysis%>%group_by(Order, AG_LC, LC, SAMPLING_E, OBSERVAT_1, COUNTY)%>%
summarise(Species_Richness=length(unique(COMMON_NAM)), Effective_Species_Diversity=exp(diversity(OBSERVATIO)),
Species_Abundance=sum(OBSERVATIO),Minutes=mean(DURATION_M), lat=mean(LATITUDE, na.rm=TRUE), long=mean(LONGITUDE, na.rm=TRUE))
ANALYSIS$OBSERVAT_1 <- gsub("0:00", "", ANALYSIS$OBSERVAT_1)
ANALYSIS$OBSERVAT_1 <- as.Date(ANALYSIS$OBSERVAT_1, format="%d/%m/%Y")
DATE1 <- "2009-01-01"
DATE2 <- "2013-12-31"
ANALYSIS <- ANALYSIS%>%filter(OBSERVAT_1 >= DATE1 & OBSERVAT_1 <= DATE2)
ANALYSIS <- ANALYSIS%>%filter(Minutes>=5)
ANALYSIS <- ANALYSIS%>%mutate(date = ymd(OBSERVAT_1))
ANALYSIS <- ANALYSIS%>%mutate(month = month(OBSERVAT_1))
ANALYSIS <- ANALYSIS%>%mutate(day = day(OBSERVAT_1))
ANALYSIS <- ANALYSIS%>%mutate(year = year(OBSERVAT_1))
##### Adding a seasonal component to the dataframe #####
getSeason <- function(DATES) {
WS <- as.Date("2012-12-15", format = "%Y-%m-%d") # Winter Solstice
SE <- as.Date("2012-3-15",  format = "%Y-%m-%d") # Spring Equinox
SS <- as.Date("2012-6-15",  format = "%Y-%m-%d") # Summer Solstice
FE <- as.Date("2012-9-15",  format = "%Y-%m-%d") # Fall Equinox
# Convert dates from any year to 2012 dates
d <- as.Date(strftime(DATES, format="2012-%m-%d"))
ifelse (d >= WS | d < SE, "Winter",
ifelse (d >= SE & d < SS, "Spring",
ifelse (d >= SS & d < FE, "Summer", "Fall")))
}
ANALYSIS$season <- getSeason(ANALYSIS$OBSERVAT_1)
Bird_Points_Landcover <- read.csv("H:/Dissertation/Dissertation Chapters/Data Chapters/Avian species diversity and land use - a Florida experience/Data/Spatial Analysis Data/Spatial_Data.csv")
Birds <- Bird_Points_Landcover%>%filter(GRIDCODE != 0)
###### Making gridcode metadata
GRIDCODE <- c(11, 21, 22, 23, 24, 31, 41, 42, 43, 50, 52, 71, 81, 82, 90, 95)
Landcover <- c("Open Water", "Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity",
"Developed, High Intensity", "Barren Land (Rock/Sand/Clay)", "Deciduous Forest", "Evergreen Forest",
"Mixed Forest", "Urban Green Area", "Shrub/Scrub", "Grassland/Herbaceous", "Pasture/Hay", "Cultivated Crops",
"Woody Wetlands", "Emergent Herbaceous Wetlands")
Aggregated_landcover <- c("Green Area", "open-urban", "low-intensity developed",
"medium/high-intensity developed", "medium/high-intensity developed",
"open-urban", "Green Area", "Green Area", "Green Area",
"Green Area","Green Area", "agriculture", "agriculture",
"agriculture", "Green Area", "Green Area")
Landcover_metadata <- as.data.frame(cbind(GRIDCODE, Landcover, Aggregated_landcover))
####### Making file to use for analysis
Birds <- merge(Birds, Landcover_metadata, by="GRIDCODE")
###### Renaming Aggregated Landcover column based on urban or non-urban layer
Birds$landcover[Birds$Aggregated_landcover=="open-urban"] <- "Open-urban"
Birds$landcover[Birds$Aggregated_landcover=="agriculture"] <- "Agriculture"
Birds$landcover[Birds$Aggregated_landcover=="low-intensity developed"] <- "Low-intensity developed"
Birds$landcover[Birds$Aggregated_landcover=="medium/high-intensity developed"] <- "Medium/high-intensity developed"
Birds$landcover[Birds$Aggregated_landcover=="Green Area" & Birds$UATYP10=="U"] <- "Urban Green Area"
Birds$landcover[Birds$Aggregated_landcover=="Green Area" & Birds$UATYP10==""] <- "Natural Green Area"
Birds$Aggregated_landcover <- NULL
names(Birds)[names(Birds)=='landcover'] <- 'AG_LC'
names(Birds)[names(Birds)=='Landcover'] <- 'LC'
library(dplyr)
library(mgcv)
library(ggplot2)
library(stringr)
Bird_Points_Landcover <- read.csv("H:/Dissertation/Dissertation Chapters/Data Chapters/Avian species diversity and land use - a Florida experience/Data/Spatial Analysis Data/Spatial_Data.csv")
Birds <- Bird_Points_Landcover%>%filter(GRIDCODE != 0)
###### Making gridcode metadata
GRIDCODE <- c(11, 21, 22, 23, 24, 31, 41, 42, 43, 50, 52, 71, 81, 82, 90, 95)
Landcover <- c("Open Water", "Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity",
"Developed, High Intensity", "Barren Land (Rock/Sand/Clay)", "Deciduous Forest", "Evergreen Forest",
"Mixed Forest", "Urban Green Area", "Shrub/Scrub", "Grassland/Herbaceous", "Pasture/Hay", "Cultivated Crops",
"Woody Wetlands", "Emergent Herbaceous Wetlands")
Aggregated_landcover <- c("Green Area", "open-urban", "low-intensity developed",
"medium/high-intensity developed", "medium/high-intensity developed",
"open-urban", "Green Area", "Green Area", "Green Area",
"Green Area","Green Area", "agriculture", "agriculture",
"agriculture", "Green Area", "Green Area")
Landcover_metadata <- as.data.frame(cbind(GRIDCODE, Landcover, Aggregated_landcover))
####### Making file to use for analysis
Birds <- merge(Birds, Landcover_metadata, by="GRIDCODE")
###### Renaming Aggregated Landcover column based on urban or non-urban layer
Birds$landcover[Birds$Aggregated_landcover=="open-urban"] <- "Open-urban"
Birds$landcover[Birds$Aggregated_landcover=="agriculture"] <- "Agriculture"
Birds$landcover[Birds$Aggregated_landcover=="low-intensity developed"] <- "Low-intensity developed"
Birds$landcover[Birds$Aggregated_landcover=="medium/high-intensity developed"] <- "Medium/high-intensity developed"
Birds$landcover[Birds$Aggregated_landcover=="Green Area" & Birds$UATYP10=="U"] <- "Urban Green Area"
Birds$landcover[Birds$Aggregated_landcover=="Green Area" & Birds$UATYP10==""] <- "Natural Green Area"
Birds$Aggregated_landcover <- NULL
names(Birds)[names(Birds)=='landcover'] <- 'AG_LC'
names(Birds)[names(Birds)=='Landcover'] <- 'LC'
###### Getting rid of species with 'x's for counts ######
Birds <- Birds%>%filter(OBSERVATIO != "X")
Birds$OBSERVATIO <- as.numeric(Birds$OBSERVATIO)
birds_taxonomic <- read.csv("H:/Dissertation/Dissertation Chapters/Data Chapters/Avian species diversity and land use - a Florida experience/Data/Birds classification/birds.all.csv")
Birds$Classifica <- NULL
Birds$SCIENTIFIC <- NULL
guild_analysis <- merge(Birds, birds_taxonomic, by="COMMON_NAM")
library(vegan)
library(lubridate)
########### GETTING A DATAFRAME FOR ANALYSIS TO BE COMPLETED ON ###############
ANALYSIS <- guild_analysis%>%group_by(Order, AG_LC, LC, SAMPLING_E, OBSERVAT_1, COUNTY)%>%
summarise(Species_Richness=length(unique(COMMON_NAM)), Effective_Species_Diversity=exp(diversity(OBSERVATIO)),
Species_Abundance=sum(OBSERVATIO),Minutes=mean(DURATION_M), lat=mean(LATITUDE, na.rm=TRUE), long=mean(LONGITUDE, na.rm=TRUE))
ANALYSIS$OBSERVAT_1 <- gsub("0:00", "", ANALYSIS$OBSERVAT_1)
ANALYSIS$OBSERVAT_1 <- as.Date(ANALYSIS$OBSERVAT_1, format="%d/%m/%Y")
DATE1 <- "2009-01-01"
DATE2 <- "2013-12-31"
ANALYSIS <- ANALYSIS%>%filter(OBSERVAT_1 >= DATE1 & OBSERVAT_1 <= DATE2)
ANALYSIS <- ANALYSIS%>%filter(Minutes>=5)
ANALYSIS <- ANALYSIS%>%mutate(date = ymd(OBSERVAT_1))
ANALYSIS <- ANALYSIS%>%mutate(month = month(OBSERVAT_1))
ANALYSIS <- ANALYSIS%>%mutate(day = day(OBSERVAT_1))
ANALYSIS <- ANALYSIS%>%mutate(year = year(OBSERVAT_1))
##### Adding a seasonal component to the dataframe #####
getSeason <- function(DATES) {
WS <- as.Date("2012-12-15", format = "%Y-%m-%d") # Winter Solstice
SE <- as.Date("2012-3-15",  format = "%Y-%m-%d") # Spring Equinox
SS <- as.Date("2012-6-15",  format = "%Y-%m-%d") # Summer Solstice
FE <- as.Date("2012-9-15",  format = "%Y-%m-%d") # Fall Equinox
# Convert dates from any year to 2012 dates
d <- as.Date(strftime(DATES, format="2012-%m-%d"))
ifelse (d >= WS | d < SE, "Winter",
ifelse (d >= SE & d < SS, "Spring",
ifelse (d >= SS & d < FE, "Summer", "Fall")))
}
ANALYSIS$season <- getSeason(ANALYSIS$OBSERVAT_1)
fitmodel <- function(d) { mod_results <- gam(Species_Abundance ~ AG_LC + season +
s(lat, long, k=3) + s(Minutes), data=d, family=nb())
predictions <- predict(mod_results, se.fit=TRUE)
prediction.df <- data.frame(d,
mu = exp(predictions$fit),
low  = exp(predictions$fit - 1.96 * predictions$se.fit),
high = exp(predictions$fit + 1.96 * predictions$se.fit))
return(prediction.df)
}
models <- ANALYSIS %>%
group_by(Order) %>%
do(model_results = fitmodel(.)) %>%
select(-Order)
models
class(models)
class(models$model_results)
models <- as.data.frame(bind_rows(models))
models <- as.data.frame(bind_rows(models$model_results))
View(models)
## packages
library(readr)
library(dplyr)
library(lubridate)
library(stringr)
library(countrycode)
library(tidyr)
library(anytime)
## Read in eBird data
clean_data <- function (filename) {
raw_data <- read_csv(filename)
colnames(raw_data) <- gsub(" |/", "_", colnames(raw_data))
raw_data %>%
# remove hybrids and domestics, remove spuhs
filter(!grepl("hybrid|Domestic", Common_Name),
!grepl(" sp\\.", Common_Name),
!grepl("\\/", Common_Name)) %>%
mutate(sciName = stringr::word(Scientific_Name, 1, 2),
# removing text between parenthesis in common name to compare uniques
comName = gsub("\\s*\\([^\\)]+\\)", "", Common_Name),
# changing state/province into a country factor
Country = countrycode::countrycode(substr(State_Province, 1, 2), "iso2c", "country.name")) %>%
mutate(Date = as.Date(Date, format="%m-%d-%Y"),
Year = year(Date),
Month = month(Date)) %>%
unite(., Year_mon, Year, Month, sep="-") %>%
mutate(Year_mon = anydate(Year_mon))
}
library(readr)
corey_data <- read_csv("C:/Users/CTC/Desktop/eBirder-visualizations/data/eBird data/corey_data.csv")
View(corey_data)
corey_clean <- clean_data(corey_data)
corey_clean <- clean_data("C:/Users/CTC/Desktop/eBirder-visualizations/data/eBird data/corey_data.csv")
View(corey_clean)
us <- corey_clean %>%
filter(Country=="United States") %>%
select(Common_Name) %>%
distinct()
us <- corey_clean %>%
filter(Country=="United States")
View(corey_clean)
us <- corey_clean %>%
filter(Country=="United States of America") %>%
select(Common_Name) %>%
distinct()
View(us)
library(readr)
ebird_US_life_list <- read_csv("C:/Users/CTC/Desktop/ebird_US_life_list.csv")
View(ebird_US_life_list)
testing <- us %>% rename(Species = "Common_Name") %>% full_join(., ebird_US_life_list, by="Species")
View(testing)
setwd('H:/Dissertation/Dissertation Chapters/Data Chapters/Relationship between avian diversity and urban environments/Analysis/avian diversity in greenspaces')
## Necessary packages
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(vegan)
library(data.table)
library(lubridate)
library(RSQLite)
library(dbplyr)
library(ggmap)
library(data.table)
library(geosphere)
ebird_db <- src_sqlite("D:/All eBird Data/ebird.sqlite", create=FALSE)
all_ebird <- tbl(ebird_db, "ebird")
### return the locality_ids that have greater than 250 checklists total throughout the three year period
localities <- all_ebird %>%
select(LOCALITY_ID, OBSERVATION_DATE, LATITUDE, LONGITUDE, SAMPLING_EVENT_IDENTIFIER) %>%
distinct() %>%
filter(OBSERVATION_DATE > "2013-01-01") %>%
filter(OBSERVATION_DATE < "2016-12-31") %>%
group_by(LOCALITY_ID) %>%
summarise(LATITUDE=mean(LATITUDE),
LONGITUDE=mean(LONGITUDE),
Number_of_checklists=n(SAMPLING_EVENT_IDENTIFIER)) %>%
filter(Number_of_checklists > 250) %>%
collect(n=Inf)
localities_names <- all_ebird %>%
select(LOCALITY_ID, LOCALITY, LOCALITY_TYPE) %>%
filter(LOCALITY_ID %in% localities_list) %>%
distinct() %>%
collect(n=Inf)
localities_list <- localities$LOCALITY_ID
localities_names <- all_ebird %>%
select(LOCALITY_ID, LOCALITY, LOCALITY_TYPE) %>%
filter(LOCALITY_ID %in% localities_list) %>%
distinct() %>%
collect(n=Inf)
localities <- merge(localities, localities_names, by="LOCALITY_ID")
top_cities <- read_csv("Data/Top_cities/ALL top urban areas.csv")
lonlat <- geocode(top_cities$city_country)
View(lonlat)
top_cities <- cbind(top_cities, lonlat)
library(RANN)
closest <- as.data.frame(nn2(top_cities[, 11:12], localities[, 3:2], 1))
localities <- cbind(localities, closest)
city_id <- as.data.frame(top_cities$city_country)
city_id$id <- 1:nrow(city_id)
locality_closest_city <- localities %>%
rename(id=nn.idx) %>%
inner_join(., city_id, by="id") %>%
rename(city_country = 'top_cities$city_country') %>%
inner_join(., top_cities, by="city_country") %>%
select(LOCALITY_ID, LOCALITY, Number_of_checklists, LATITUDE, LONGITUDE, city_country, lon, lat, Country, Urban_area, LOCALITY_TYPE)
View(locality_closest_city)
setDT(locality_closest_city)[, distance.km := distGeo(matrix(c(lon, lat), ncol=2),
matrix(c(LONGITUDE, LATITUDE), ncol=2))/1000]
test <- locality_closest_city %>%
filter(distance.km <= 20) %>%
filter(LOCALITY_TYPE == 'H')
View(test)
test <- locality_closest_city %>%
filter(distance.km <= 21) %>%
filter(LOCALITY_TYPE == 'H')
test <- locality_closest_city %>%
filter(distance.km <= 20) %>%
filter(LOCALITY_TYPE == 'H')
View(top_cities)
table(test$Country)
table(test$city_country)
write.csv(locality_closest_city, "Data/Potential_study_sites/locality_closest_city.csv", row.names=FALSE)
locality_closest_city <- locality_closest_city %>%
filter(distance.km <= 20) %>%
filter(LOCALITY_TYPE == 'H')
### write out csv to be used to select study sites
write.csv(locality_closest_city, "Data/Potential_study_sites/locality_closest_city.csv", row.names=FALSE)
